* Cube
#+begin_src ipython :session pinguins :file  :exports both
  import numpy as np
  import pandas as pd
  dirs = {'W' : np.array([-1, 1, 0]),
                       'NW': np.array([0, 1, -1]),
                       'NE': np.array([1, 0, -1]),
                       'E' : np.array([1, -1, 0]),
                       'SE': np.array([0, -1, 1]),
                       'SW': np.array([-1, 0, 1]),
          }

  def get_hex(map, cube):
      res = map[(map.x == cube[0]) & (map.y == cube[1]) & (map.z == cube[2])]
      if len(res) > 0:
          return res[0]
  def cube_to_evenr(cube):
          return np.array([cube[0] + (cube[2] + (cube[2]&1)) / 2, cube[2]], dtype=int)

  def evenr_to_cube(hex):
      x = hex[1] - (hex[0]+ hex[0]&1) / 2
      z = hex[0]
      y = -x-z
      return np.array([x, y, z], dtype=int)

  def evenr_to_label(hex, labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
      return '{}{}'.format(labels[hex[1]], hex[0]+1)

  nb_rows = 8
  nb_cols = 8
  nb_hex = nb_rows * nb_cols
  evenr = np.array([[i, j] for i in range(nb_rows) for j in range(nb_cols)])
  cube = np.array([evenr_to_cube(hex) for hex in evenr])
  label = [evenr_to_label(hex) for hex in evenr]
  map = pd.DataFrame({
      'i': pd.Series(evenr[:,0]),
      'j': pd.Series(evenr[:,1]),
      'x': pd.Series(cube[:, 0]),
      'y': pd.Series(cube[:, 1]),
      'z': pd.Series(cube[:, 2]),
      'xl': pd.Series(np.zeros(nb_hex, dtype=int)),
      'yl': pd.Series(np.zeros(nb_hex, dtype=int)),
      'zl': pd.Series(np.zeros(nb_hex, dtype=int)),
      'xi': pd.Series(np.zeros(nb_hex, dtype=int)),
      'yi': pd.Series(np.zeros(nb_hex, dtype=int)),
      'zi': pd.Series(np.zeros(nb_hex, dtype=int)),
      'label': pd.Series(label),
  })
  map
#+end_src

#+RESULTS:
#+begin_example
# Out[1]:
,#+BEGIN_EXAMPLE
  i  j  x   y  z  xl  yl  zl  xi  yi  zi label
  0   0  0  0   0  0   0   0   0   0   0   0    A1
  1   0  1  1  -1  0   0   0   0   0   0   0    B1
  2   0  2  2  -2  0   0   0   0   0   0   0    C1
  3   0  3  3  -3  0   0   0   0   0   0   0    D1
  4   0  4  4  -4  0   0   0   0   0   0   0    E1
  .. .. .. ..  .. ..  ..  ..  ..  ..  ..  ..   ...
  59  7  3  3 -10  7   0   0   0   0   0   0    D8
  60  7  4  4 -11  7   0   0   0   0   0   0    E8
  61  7  5  5 -12  7   0   0   0   0   0   0    F8
  62  7  6  6 -13  7   0   0   0   0   0   0    G8
  63  7  7  7 -14  7   0   0   0   0   0   0    H8

  [64 rows x 12 columns]
,#+END_EXAMPLE
#+end_example
#+begin_src ipython :session pinguins :file  :exports both
  def gen_z(df, nb_rows, nb_cols):
      lines = []
      for z in range(nb_rows):
          line = []
          for c in range(nb_cols):
              hex = z*nb_cols+c
              line.append(hex)
              df.loc[hex, 'zl'] = z
              df.loc[hex, 'zi'] = c
          lines.append(line)
      return lines
  lines = gen_z(map, nb_rows, nb_cols)
  #print(map.iloc[lines[0]])
  hex = map[map['label'] == 'C5']
  #lines[hex.zl]
  zl = hex['zl'].values[0]
  zi = hex['zi'].values[0]
  print(hex.index.values, zi, lines[zl])
  acc = map.loc[34, 'x'] > 3
  print(acc)

#+end_src

#+RESULTS:
: # Out[66]:

#+begin_src ipython :session pinguins :file  :exports both
  def gen_z(df, hexs, nb_rows, nb_cols):
      for z in range(nb_rows):
          pos = df.loc[z*nb_rows][['x', 'y', 'z']].to_numpy(dtype=int)
          ok = True
          ids = []
          while(ok):
              pos += dir

              hex = get_hex(df, pos)
              if hex is not None:
                  #ids.append(hex.index[0])
                  ids.append(df.loc[hex.index[0]].label)

              else:
                  ok = False
#+end_src

#+begin_src ipython :session pinguins :file :exports both
  def to_label(i, j, labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
      return '{}{}'.format(labels[j], i+1)

  def next_x(i, j, k, n_rows=8, n_cols=8):
      return i+1, j + 1 if i % 2 == 0 else j, k+1

  def x_line(i, j, n_rows=8, n_cols=8):
      res = []
      while i < n_rows and j < n_cols:
          res.append(to_label(i, j))
          i, j = next_x(i, j)
      return res
  #x_line(0,0)
  x = next_x(0, 1)
  x
#+end_src

#+RESULTS:
: # Out[7]:
: : (1, 2)

#+begin_src ipython :session pinguins :file :exports both
  def y_line(i, j, n_rows=8, n_cols=8):
      res = []

      while i < n_rows and j >= 0:
          res.append([i, j, i*n_cols+j])
          j = j - 1 if not i % 2 == 0 else j
          i += 1
      return res
  y_line(3,7)

#+end_src

#+RESULTS:
: # Out[17]:
: : [[3, 7, 31], [4, 6, 38], [5, 6, 46], [6, 5, 53], [7, 5, 61]]

* Sans cube
#+name: to_label
#+begin_src ipython :session pinguins :file  :exports both
def to_label(i, j, labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']):
      return '{}{}'.format(labels[j], i+1)
#+end_src

#+RESULTS: to_label
: # Out[1]:

#+name: xlines
#+begin_src ipython :session pinguins :file  :exports both
  def init_x_lines(hexs, n_rows=8, n_cols=8):
      def next_x(i, j, n_rows=8, n_cols=8):
          return i+1, j + 1 if i % 2 == 0 else j
      n_rows = 8
      n_cols = 8

      xlines = []
      for r in range(n_rows-1, 0, -2):
          res = []
          i = r
          j = 0
          while i < n_rows and j < n_cols:
              label = to_label(i, j)
              hexs[label] = {'xl': len(xlines), 'xi': len(res), 'v': 0}
              res.append(label)
              i, j = next_x(i, j)
          xlines.append(res)

      for c in range(n_cols):
          res = []
          i = 0
          j = c
          while i < n_rows and j < n_cols:
              label = to_label(i, j)
              res.append(label)
              hexs[label] = {'xl': len(xlines), 'xi': len(res), 'v': 0}
              i, j = next_x(i, j)
          xlines.append(res)

      return xlines
#+end_src

#+RESULTS: xlines
: # Out[2]:

#+name: ylines
#+begin_src ipython :session pinguins :file  :exports both
  def init_y_lines(hexs, n_rows=8, n_cols=8):
      def next_y(i, j, n_rows=8, n_cols=8):
          return i+1, j - 1 if i % 2 != 0 else j

      ylines = []

      for c in range(n_cols):
          res = []
          i = 0
          j = c
          while i < n_rows and j >= 0:
              label = to_label(i, j)
              res.append(label)
              hexs[label].update({'yl': len(ylines), 'yi': len(res)})
              i, j = next_y(i, j)
          ylines.append(res)

      for r in range(2, n_cols, 2):
          res = []
          i = r
          j = n_cols-1
          while i < n_rows and j >= 0:
              label = to_label(i, j)
              hexs[label].update({'yl': len(ylines), 'yi': len(res)})
              res.append(label)
              i, j = next_y(i, j)
          ylines.append(res)

      return ylines
#+end_src

#+RESULTS: ylines
: # Out[3]:

#+name: zlines
#+begin_src ipython :session pinguins :file  :exports both
  def init_z_lines(hexs, n_rows=8, n_cols=8):
      def next_z(i, j, n_rows=8, n_cols=8):
          return i, j + 1

      zlines = []

      for r in range(n_rows):
          res = []
          i = r
          j = 0
          while i < n_rows and j < n_cols:
              label = to_label(i, j)
              res.append(label)
              hexs[label].update({'zl': len(zlines), 'zi': len(res)})
              i, j = next_z(i, j)
          zlines.append(res)

      return zlines
#+end_src

#+RESULTS: zlines
: # Out[4]:

#+begin_src ipython :session pinguins :file  :exports both :noweb yes :tangle tangle.py
  <<to_label>>
  <<xlines>>
  <<ylines>>
  <<zlines>>
  class HexaGrid:
      def __init__(self):
          self.hexs = {}
          self.xlines = init_x_lines(self.hexs)
          self.ylines = init_y_lines(self.hexs)
          self.zlines = init_z_lines(self.hexs)

  hg = HexaGrid()
  hg.hexs, hg.xlines
#+end_src

#+RESULTS:
#+begin_example
# Out[5]:
,#+BEGIN_EXAMPLE
  ({'A8': {'xl': 0, 'xi': 0, 'v': 0, 'yl': 3, 'yi': 8, 'zl': 7, 'zi': 1},
  'A6': {'xl': 1, 'xi': 0, 'v': 0, 'yl': 2, 'yi': 6, 'zl': 5, 'zi': 1},
  'A7': {'xl': 1, 'xi': 1, 'v': 0, 'yl': 3, 'yi': 7, 'zl': 6, 'zi': 1},
  'B8': {'xl': 1, 'xi': 2, 'v': 0, 'yl': 4, 'yi': 8, 'zl': 7, 'zi': 2},
  'A4': {'xl': 2, 'xi': 0, 'v': 0, 'yl': 1, 'yi': 4, 'zl': 3, 'zi': 1},
  'A5': {'xl': 2, 'xi': 1, 'v': 0, 'yl': 2, 'yi': 5, 'zl': 4, 'zi': 1},
  'B6': {'xl': 2, 'xi': 2, 'v': 0, 'yl': 3, 'yi': 6, 'zl': 5, 'zi': 2},
  'B7': {'xl': 2, 'xi': 3, 'v': 0, 'yl': 4, 'yi': 7, 'zl': 6, 'zi': 2},
  'C8': {'xl': 2, 'xi': 4, 'v': 0, 'yl': 5, 'yi': 8, 'zl': 7, 'zi': 3},
  'A2': {'xl': 3, 'xi': 0, 'v': 0, 'yl': 0, 'yi': 2, 'zl': 1, 'zi': 1},
  'A3': {'xl': 3, 'xi': 1, 'v': 0, 'yl': 1, 'yi': 3, 'zl': 2, 'zi': 1},
  'B4': {'xl': 3, 'xi': 2, 'v': 0, 'yl': 2, 'yi': 4, 'zl': 3, 'zi': 2},
  'B5': {'xl': 3, 'xi': 3, 'v': 0, 'yl': 3, 'yi': 5, 'zl': 4, 'zi': 2},
  'C6': {'xl': 3, 'xi': 4, 'v': 0, 'yl': 4, 'yi': 6, 'zl': 5, 'zi': 3},
  'C7': {'xl': 3, 'xi': 5, 'v': 0, 'yl': 5, 'yi': 7, 'zl': 6, 'zi': 3},
  'D8': {'xl': 3, 'xi': 6, 'v': 0, 'yl': 6, 'yi': 8, 'zl': 7, 'zi': 4},
  'A1': {'xl': 4, 'xi': 1, 'v': 0, 'yl': 0, 'yi': 1, 'zl': 0, 'zi': 1},
  'B2': {'xl': 4, 'xi': 2, 'v': 0, 'yl': 1, 'yi': 2, 'zl': 1, 'zi': 2},
  'B3': {'xl': 4, 'xi': 3, 'v': 0, 'yl': 2, 'yi': 3, 'zl': 2, 'zi': 2},
  'C4': {'xl': 4, 'xi': 4, 'v': 0, 'yl': 3, 'yi': 4, 'zl': 3, 'zi': 3},
  'C5': {'xl': 4, 'xi': 5, 'v': 0, 'yl': 4, 'yi': 5, 'zl': 4, 'zi': 3},
  'D6': {'xl': 4, 'xi': 6, 'v': 0, 'yl': 5, 'yi': 6, 'zl': 5, 'zi': 4},
  'D7': {'xl': 4, 'xi': 7, 'v': 0, 'yl': 6, 'yi': 7, 'zl': 6, 'zi': 4},
  'E8': {'xl': 4, 'xi': 8, 'v': 0, 'yl': 7, 'yi': 8, 'zl': 7, 'zi': 5},
  'B1': {'xl': 5, 'xi': 1, 'v': 0, 'yl': 1, 'yi': 1, 'zl': 0, 'zi': 2},
  'C2': {'xl': 5, 'xi': 2, 'v': 0, 'yl': 2, 'yi': 2, 'zl': 1, 'zi': 3},
  'C3': {'xl': 5, 'xi': 3, 'v': 0, 'yl': 3, 'yi': 3, 'zl': 2, 'zi': 3},
  'D4': {'xl': 5, 'xi': 4, 'v': 0, 'yl': 4, 'yi': 4, 'zl': 3, 'zi': 4},
  'D5': {'xl': 5, 'xi': 5, 'v': 0, 'yl': 5, 'yi': 5, 'zl': 4, 'zi': 4},
  'E6': {'xl': 5, 'xi': 6, 'v': 0, 'yl': 6, 'yi': 6, 'zl': 5, 'zi': 5},
  'E7': {'xl': 5, 'xi': 7, 'v': 0, 'yl': 7, 'yi': 7, 'zl': 6, 'zi': 5},
  'F8': {'xl': 5, 'xi': 8, 'v': 0, 'yl': 8, 'yi': 5, 'zl': 7, 'zi': 6},
  'C1': {'xl': 6, 'xi': 1, 'v': 0, 'yl': 2, 'yi': 1, 'zl': 0, 'zi': 3},
  'D2': {'xl': 6, 'xi': 2, 'v': 0, 'yl': 3, 'yi': 2, 'zl': 1, 'zi': 4},
  'D3': {'xl': 6, 'xi': 3, 'v': 0, 'yl': 4, 'yi': 3, 'zl': 2, 'zi': 4},
  'E4': {'xl': 6, 'xi': 4, 'v': 0, 'yl': 5, 'yi': 4, 'zl': 3, 'zi': 5},
  'E5': {'xl': 6, 'xi': 5, 'v': 0, 'yl': 6, 'yi': 5, 'zl': 4, 'zi': 5},
  'F6': {'xl': 6, 'xi': 6, 'v': 0, 'yl': 7, 'yi': 6, 'zl': 5, 'zi': 6},
  'F7': {'xl': 6, 'xi': 7, 'v': 0, 'yl': 8, 'yi': 4, 'zl': 6, 'zi': 6},
  'G8': {'xl': 6, 'xi': 8, 'v': 0, 'yl': 9, 'yi': 3, 'zl': 7, 'zi': 7},
  'D1': {'xl': 7, 'xi': 1, 'v': 0, 'yl': 3, 'yi': 1, 'zl': 0, 'zi': 4},
  'E2': {'xl': 7, 'xi': 2, 'v': 0, 'yl': 4, 'yi': 2, 'zl': 1, 'zi': 5},
  'E3': {'xl': 7, 'xi': 3, 'v': 0, 'yl': 5, 'yi': 3, 'zl': 2, 'zi': 5},
  'F4': {'xl': 7, 'xi': 4, 'v': 0, 'yl': 6, 'yi': 4, 'zl': 3, 'zi': 6},
  'F5': {'xl': 7, 'xi': 5, 'v': 0, 'yl': 7, 'yi': 5, 'zl': 4, 'zi': 6},
  'G6': {'xl': 7, 'xi': 6, 'v': 0, 'yl': 8, 'yi': 3, 'zl': 5, 'zi': 7},
  'G7': {'xl': 7, 'xi': 7, 'v': 0, 'yl': 9, 'yi': 2, 'zl': 6, 'zi': 7},
  'H8': {'xl': 7, 'xi': 8, 'v': 0, 'yl': 10, 'yi': 1, 'zl': 7, 'zi': 8},
  'E1': {'xl': 8, 'xi': 1, 'v': 0, 'yl': 4, 'yi': 1, 'zl': 0, 'zi': 5},
  'F2': {'xl': 8, 'xi': 2, 'v': 0, 'yl': 5, 'yi': 2, 'zl': 1, 'zi': 6},
  'F3': {'xl': 8, 'xi': 3, 'v': 0, 'yl': 6, 'yi': 3, 'zl': 2, 'zi': 6},
  'G4': {'xl': 8, 'xi': 4, 'v': 0, 'yl': 7, 'yi': 4, 'zl': 3, 'zi': 7},
  'G5': {'xl': 8, 'xi': 5, 'v': 0, 'yl': 8, 'yi': 2, 'zl': 4, 'zi': 7},
  'H6': {'xl': 8, 'xi': 6, 'v': 0, 'yl': 9, 'yi': 1, 'zl': 5, 'zi': 8},
  'H7': {'xl': 8, 'xi': 7, 'v': 0, 'yl': 10, 'yi': 0, 'zl': 6, 'zi': 8},
  'F1': {'xl': 9, 'xi': 1, 'v': 0, 'yl': 5, 'yi': 1, 'zl': 0, 'zi': 6},
  'G2': {'xl': 9, 'xi': 2, 'v': 0, 'yl': 6, 'yi': 2, 'zl': 1, 'zi': 7},
  'G3': {'xl': 9, 'xi': 3, 'v': 0, 'yl': 7, 'yi': 3, 'zl': 2, 'zi': 7},
  'H4': {'xl': 9, 'xi': 4, 'v': 0, 'yl': 8, 'yi': 1, 'zl': 3, 'zi': 8},
  'H5': {'xl': 9, 'xi': 5, 'v': 0, 'yl': 9, 'yi': 0, 'zl': 4, 'zi': 8},
  'G1': {'xl': 10, 'xi': 1, 'v': 0, 'yl': 6, 'yi': 1, 'zl': 0, 'zi': 7},
  'H2': {'xl': 10, 'xi': 2, 'v': 0, 'yl': 7, 'yi': 2, 'zl': 1, 'zi': 8},
  'H3': {'xl': 10, 'xi': 3, 'v': 0, 'yl': 8, 'yi': 0, 'zl': 2, 'zi': 8},
  'H1': {'xl': 11, 'xi': 1, 'v': 0, 'yl': 7, 'yi': 1, 'zl': 0, 'zi': 8}},
  [['A8'],
  ['A6', 'A7', 'B8'],
  ['A4', 'A5', 'B6', 'B7', 'C8'],
  ['A2', 'A3', 'B4', 'B5', 'C6', 'C7', 'D8'],
  ['A1', 'B2', 'B3', 'C4', 'C5', 'D6', 'D7', 'E8'],
  ['B1', 'C2', 'C3', 'D4', 'D5', 'E6', 'E7', 'F8'],
  ['C1', 'D2', 'D3', 'E4', 'E5', 'F6', 'F7', 'G8'],
  ['D1', 'E2', 'E3', 'F4', 'F5', 'G6', 'G7', 'H8'],
  ['E1', 'F2', 'F3', 'G4', 'G5', 'H6', 'H7'],
  ['F1', 'G2', 'G3', 'H4', 'H5'],
  ['G1', 'H2', 'H3'],
  ['H1']])
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session pinguins :file  :exports both
%timeit hg = HexaGrid()
#+end_src

#+RESULTS:
: # Out[83]:
#+name: eval_hex
#+begin_src ipython :session pinguins :file  :exports both
  def eval_line(self, line, i, line_factor=1/3):
      value = 0
      # On cherche à gauche
      max = 0
      k = i - 1
      while k >= 0:
          v = self.hexs[line[k]]['v']
          if v > max:
              max = v
          k -= 1
      value += line_factor/2 * max

      # On cherche à droite
      max = 0
      k = i + 1
      while k < len(line):
          v = self.hexs[line[k]]['v']
          if v > max:
              max = v
          k += 1
      value += line_factor/2 * max
      return value

  def eval_hex(self, label, v_factor=1, d2_factor=0.75):
      to_eval = self.hexs[label]
      value = v_factor * to_eval['v']

      value += d2_factor * self.eval_line(self.xlines[to_eval['xl']], to_eval['xi'])
      value += d2_factor * self.eval_line(self.ylines[to_eval['yl']], to_eval['yi'])
      value += d2_factor * self.eval_line(self.zlines[to_eval['zl']], to_eval['zi'])
      return value


#+end_src
